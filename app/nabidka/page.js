"use client";

import { useState, useEffect } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { useProducts } from '../../lib/useProducts';

export default function Nabidka() {
  const { products, loading } = useProducts();
  const [cart, setCart] = useState([]);
  const [showCart, setShowCart] = useState(false);
  const [showOrderForm, setShowOrderForm] = useState(false);

  // Naƒç√≠st ko≈°√≠k z localStorage p≈ôi naƒçten√≠ str√°nky
  useEffect(() => {
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
      setCart(JSON.parse(savedCart));
    }
  }, []);

  // Ulo≈æit ko≈°√≠k do localStorage p≈ôi ka≈æd√© zmƒõnƒõ
  useEffect(() => {
    localStorage.setItem('cart', JSON.stringify(cart));
  }, [cart]);

  // ‚úÖ OPRAVEN√Å FUNKCE - pou≈æ√≠v√° Firebase ID
  const addToCart = (product) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(item => item.id === product.id);
      
      if (existingItem) {
        return prevCart.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else {
        return [...prevCart, { 
          id: product.id,
          name: product.name,
          price: product.price,
          priceNum: product.priceNum,
          image: product.image,
          quantity: 1 
        }];
      }
    });
  };

  // ‚úÖ OPRAVEN√Å FUNKCE - pou≈æ√≠v√° Firebase ID
  const removeFromCart = (productId) => {
    setCart(prevCart => prevCart.filter(item => item.id !== productId));
  };

  // ‚úÖ OPRAVEN√Å FUNKCE - pou≈æ√≠v√° Firebase ID
  const updateQuantity = (productId, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(productId);
      return;
    }
    
    setCart(prevCart =>
      prevCart.map(item =>
        item.id === productId
          ? { ...item, quantity: newQuantity }
          : item
      )
    );
  };

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + (item.priceNum * item.quantity), 0);
  };

  const getTotalItems = () => {
    return cart.reduce((total, item) => total + item.quantity, 0);
  };

  const handleOrderSubmit = async (orderData) => {
    const cartItems = cart.map(item => 
      `${item.name} - ${item.quantity}x (${item.price})`
    ).join('\n');

    const orderMessage = `
üõí NOV√Å OBJEDN√ÅVKA:

üë§ Z√ÅKAZN√çK:
${orderData.name}
üìû ${orderData.phone}
üìß ${orderData.email || 'Nezad√°n'}

üì¶ PRODUKTY:
${cartItems}

üí∞ CELKOV√Å CENA: ${getTotalPrice()} Kƒç

üìù POZN√ÅMKA:
${orderData.note || '≈Ω√°dn√° pozn√°mka'}

‚è∞ Objedn√°no: ${new Date().toLocaleString('cs-CZ')}
    `;

    try {
      // 1. üì± ODESLAT NA WHATSAPP
      const whatsappUrl = `https://wa.me/420605198143?text=${encodeURIComponent(orderMessage)}`;
      window.open(whatsappUrl, '_blank');

      // 2. üéÆ ODESLAT NA DISCORD WEBHOOK
      await sendToDiscord(orderMessage, cart, orderData);

      // 3. üìß ODESLAT EMAIL
      await sendEmail(orderMessage, orderData);

      // 4. Vyƒçistit ko≈°√≠k
      setCart([]);
      setShowOrderForm(false);
      setShowCart(false);
      
      alert('‚úÖ Objedn√°vka byla odesl√°na na v≈°echny kan√°ly!\n\nüì± WhatsApp\nüéÆ Discord\nüìß Email');

    } catch (error) {
      console.error('Chyba p≈ôi odes√≠l√°n√≠:', error);
      alert('‚ö†Ô∏è Objedn√°vka byla odesl√°na na WhatsApp, ale mohla b√Ωt chyba s ostatn√≠mi kan√°ly.');
    }
  };

  // üéÆ DISCORD WEBHOOK FUNKCE
  const sendToDiscord = async (message, cart, orderData) => {
    try {
      const discordWebhookUrl = "https://discord.com/api/webhooks/1313206005851893850/fCGpMU0L3j6x8mSCFwwJnx8VZN-WgLevzLq5_MRFa-rGVjYOtgdnIuNfBrWVfaHZsYQJ";
      
      const embed = {
        title: "üõí Nov√° objedn√°vka - Dobroty od mamky",
        color: 0x28a745, // Zelen√° barva
        fields: [
          {
            name: "üë§ Z√°kazn√≠k",
            value: `**${orderData.name}**\nüìû ${orderData.phone}\nüìß ${orderData.email || 'Nezad√°n'}`,
            inline: false
          },
          {
            name: "üì¶ Produkty",
            value: cart.map(item => `‚Ä¢ ${item.name} - ${item.quantity}x (${item.priceNum * item.quantity} Kƒç)`).join('\n'),
            inline: false
          },
          {
            name: "üí∞ Celkov√° cena",
            value: `**${getTotalPrice()} Kƒç**`,
            inline: true
          },
          {
            name: "‚è∞ ƒåas objedn√°vky",
            value: new Date().toLocaleString('cs-CZ'),
            inline: true
          }
        ],
        footer: {
          text: "Dobroty od mamky ‚Ä¢ Automatick√° objedn√°vka"
        },
        timestamp: new Date().toISOString()
      };

      if (orderData.note) {
        embed.fields.push({
          name: "üìù Pozn√°mka",
          value: orderData.note,
          inline: false
        });
      }

      const response = await fetch(discordWebhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          embeds: [embed],
          username: "Objedn√°vky Bot",
          avatar_url: "https://cdn-icons-png.flaticon.com/512/3595/3595455.png"
        })
      });

      if (response.ok) {
        console.log('‚úÖ Discord webhook √∫spƒõ≈°n√Ω');
      } else {
        console.error('‚ùå Discord webhook chyba:', response.status);
      }
    } catch (error) {
      console.error('‚ùå Discord webhook error:', error);
    }
  };

  // üìß EMAIL FUNKCE (pomoc√≠ EmailJS nebo jin√© slu≈æby)
  const sendEmail = async (message, orderData) => {
    try {
      // Pro EmailJS (pokud budete cht√≠t pozdƒõji)
      // Zat√≠m jen console.log
      console.log('üìß Email by byl odesl√°n na: suslice1@seznam.cz');
      console.log('Obsah:', message);
      
      // TODO: Implementovat EmailJS nebo jin√Ω email service
    } catch (error) {
      console.error('‚ùå Email error:', error);
    }
  };

  if (loading) {
    return (
      <div style={{ textAlign: 'center', padding: '4rem' }}>
        <h2>Naƒç√≠t√°n√≠ nab√≠dky...</h2>
      </div>
    );
  }

  return (
    <>
      <header className="header">
        <div className="header-content">
          <div className="logo">
            <h2>Dobroty od mamky</h2>
          </div>
          <nav className="navigation">
            <Link href="/" className="nav-link">Dom≈Ø</Link>
            <Link href="/nabidka" className="nav-link active">Nab√≠dka</Link>
            <Link href="/kontakt" className="nav-link">Kontakt</Link>
            
            {/* ‚úÖ KO≈†√çK TLAƒå√çTKO */}
            <button 
              className="cart-btn" 
              onClick={() => setShowCart(true)}
            >
              üõí Ko≈°√≠k ({getTotalItems()})
            </button>
          </nav>
        </div>
      </header>

      <main className="main-content">
        <section className="products-section">
          <h2>Na≈°e nab√≠dka</h2>
          
          {/* SLAN√â PRODUKTY */}
          <div className="category-section">
            <h3>üßÑ Slan√© dobroty</h3>
            <div className="products-grid">
              {products.slane.map(product => (
                <div key={product.id} className="product-card">
                  <div className="product-image">
                    <Image 
                      src={product.image || '/placeholder.jpeg'} 
                      alt={product.name}
                      width={300}
                      height={200}
                      style={{ objectFit: 'cover' }}
                    />
                  </div>
                  <div className="product-content">
                    <h4>{product.name}</h4>
                    <p>{product.description}</p>
                    <div className="product-footer">
                      <span className="price">{product.price}</span>
                      <button 
                        onClick={() => addToCart(product)}
                        className="add-to-cart-btn"
                      >
                        P≈ôidat do ko≈°√≠ku
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* SLADK√â PRODUKTY */}
          <div className="category-section">
            <h3>üç∞ Sladk√© dobroty</h3>
            <div className="products-grid">
              {products.sladke.map(product => (
                <div key={product.id} className="product-card">
                  <div className="product-image">
                    <Image 
                      src={product.image || '/placeholder.jpeg'} 
                      alt={product.name}
                      width={300}
                      height={200}
                      style={{ objectFit: 'cover' }}
                    />
                  </div>
                  <div className="product-content">
                    <h4>{product.name}</h4>
                    <p>{product.description}</p>
                    <div className="product-footer">
                      <span className="price">{product.price}</span>
                      <button 
                        onClick={() => addToCart(product)}
                        className="add-to-cart-btn"
                      >
                        P≈ôidat do ko≈°√≠ku
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* KO≈†√çK MODAL */}
        {showCart && (
          <div className="modal-overlay">
            <div className="cart-modal">
              <div className="cart-header">
                <h3>üõí V√°≈° ko≈°√≠k</h3>
                <button onClick={() => setShowCart(false)}>‚úï</button>
              </div>
              
              <div className="cart-content">
                {cart.length === 0 ? (
                  <p>Ko≈°√≠k je pr√°zdn√Ω</p>
                ) : (
                  <>
                    {cart.map(item => (
                      <div key={item.id} className="cart-item">
                        <div className="cart-item-image">
                          <Image 
                            src={item.image || '/placeholder.jpeg'} 
                            alt={item.name}
                            width={80}
                            height={60}
                            style={{ objectFit: 'cover', borderRadius: '8px' }}
                          />
                        </div>
                        <div className="cart-item-details">
                          <h4>{item.name}</h4>
                          <p>{item.price}</p>
                        </div>
                        <div className="cart-item-quantity">
                          <button onClick={() => updateQuantity(item.id, item.quantity - 1)}>-</button>
                          <span>{item.quantity}</span>
                          <button onClick={() => updateQuantity(item.id, item.quantity + 1)}>+</button>
                        </div>
                        <div className="cart-item-total">
                          {item.priceNum * item.quantity} Kƒç
                        </div>
                        <button 
                          className="remove-item"
                          onClick={() => removeFromCart(item.id)}
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                    ))}
                    
                    <div className="cart-total">
                      <strong>Celkem: {getTotalPrice()} Kƒç</strong>
                    </div>
                    
                    <div className="cart-actions">
                      <button 
                        className="order-btn"
                        onClick={() => {
                          setShowCart(false);
                          setShowOrderForm(true);
                        }}
                      >
                        Objednat
                      </button>
                      <button 
                        className="clear-cart-btn"
                        onClick={() => setCart([])}
                      >
                        Vyƒçistit ko≈°√≠k
                      </button>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        )}

        {/* OBJEDN√ÅVKOV√ù FORMUL√Å≈ò */}
        {showOrderForm && (
          <div className="modal-overlay">
            <div className="order-modal">
              <OrderForm 
                cart={cart}
                onSubmit={handleOrderSubmit}
                onCancel={() => setShowOrderForm(false)}
                totalPrice={getTotalPrice()}
              />
            </div>
          </div>
        )}
      </main>
    </>
  );
}

// Komponenta objedn√°vkov√©ho formul√°≈ôe z≈Øst√°v√° stejn√°
function OrderForm({ cart, onSubmit, onCancel, totalPrice }) {
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    email: '',
    note: ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <form onSubmit={handleSubmit} className="order-form">
      <h3>Dokonƒçit objedn√°vku</h3>
      
      <div className="order-summary">
        <h4>Souhrn objedn√°vky:</h4>
        {cart.map(item => (
          <div key={item.id} className="order-item">
            <span>{item.name} - {item.quantity}x</span>
            <span>{item.priceNum * item.quantity} Kƒç</span>
          </div>
        ))}
        <div className="order-total">
          <strong>Celkem: {totalPrice} Kƒç</strong>
        </div>
      </div>

      <div className="form-group">
        <input
          type="text"
          placeholder="Jm√©no a p≈ô√≠jmen√≠ *"
          value={formData.name}
          onChange={(e) => setFormData({...formData, name: e.target.value})}
          required
        />
      </div>

      <div className="form-group">
        <input
          type="tel"
          placeholder="Telefon *"
          value={formData.phone}
          onChange={(e) => setFormData({...formData, phone: e.target.value})}
          required
        />
      </div>

      <div className="form-group">
        <input
          type="email"
          placeholder="Email"
          value={formData.email}
          onChange={(e) => setFormData({...formData, email: e.target.value})}
        />
      </div>

      <div className="form-group">
        <textarea
          placeholder="Pozn√°mka k objedn√°vce"
          value={formData.note}
          onChange={(e) => setFormData({...formData, note: e.target.value})}
        />
      </div>

      <div className="form-buttons">
        <button type="submit">Odeslat objedn√°vku</button>
        <button type="button" onClick={onCancel}>Zru≈°it</button>
      </div>
    </form>
  );
}